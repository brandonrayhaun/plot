Elm.LinePlot = Elm.LinePlot || {};
Elm.LinePlot.make = function (_elm) {
   "use strict";
   _elm.LinePlot = _elm.LinePlot || {};
   if (_elm.LinePlot.values)
   return _elm.LinePlot.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "LinePlot",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Types = Elm.Types.make(_elm);
   var plotToForms = F4(function (_v0,
   _v1,
   _v2,
   p) {
      return function () {
         switch (_v2.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v1.ctor)
                 {case "_Tuple2":
                    return function () {
                         switch (_v0.ctor)
                         {case "_Tuple2":
                            return function () {
                                 var yExtent = _v1._1 - _v1._0;
                                 var xExtent = _v0._1 - _v0._0;
                                 var sy_ = _v2._1 * (3.8 / 5);
                                 var sx_ = _v2._0 * (3.8 / 5);
                                 var adjustY = function (y) {
                                    return sy_ / (_v1._1 - _v1._0) * (y - _v1._0) - sy_ / 2;
                                 };
                                 var adjustedY = A2($List.map,
                                 adjustY,
                                 p.y);
                                 var adjustX = function (x) {
                                    return sx_ / (_v0._1 - _v0._0) * (x - _v0._0) - sx_ / 2;
                                 };
                                 var adjustedX = A2($List.map,
                                 adjustX,
                                 p.x);
                                 var points = A3($List.map2,
                                 F2(function (v0,v1) {
                                    return {ctor: "_Tuple2"
                                           ,_0: v0
                                           ,_1: v1};
                                 }),
                                 adjustedX,
                                 adjustedY);
                                 var line = p.line ? _L.fromArray([$Graphics$Collage.traced(p.lineStyle)($Graphics$Collage.path(points))]) : _L.fromArray([]);
                                 return A2($Basics._op["++"],
                                 line,
                                 function () {
                                    var _v12 = p.marker;
                                    switch (_v12.ctor)
                                    {case "Circle":
                                       return A2($List.map,
                                         function (x) {
                                            return $Graphics$Collage.move(x)($Graphics$Collage.filled(p.markerColor)($Graphics$Collage.circle(p.markerSize)));
                                         },
                                         points);
                                       case "NGon":
                                       return A2($List.map,
                                         function (x) {
                                            return $Graphics$Collage.move(x)($Graphics$Collage.filled(p.markerColor)(A2($Graphics$Collage.ngon,
                                            _v12._0,
                                            p.markerSize)));
                                         },
                                         points);
                                       case "NoMarker":
                                       return _L.fromArray([]);
                                       case "Shell":
                                       return A2($List.map,
                                         function (x) {
                                            return $Graphics$Collage.move(x)($Graphics$Collage.outlined(_U.replace([["color"
                                                                                                                    ,p.markerColor]],
                                            $Graphics$Collage.defaultLine))($Graphics$Collage.circle(p.markerSize)));
                                         },
                                         points);}
                                    _U.badCase($moduleName,
                                    "between lines 96 and 101");
                                 }());
                              }();}
                         _U.badCase($moduleName,
                         "between lines 84 and 101");
                      }();}
                 _U.badCase($moduleName,
                 "between lines 84 and 101");
              }();}
         _U.badCase($moduleName,
         "between lines 84 and 101");
      }();
   });
   var safe = F2(function (f,ss) {
      return $List.isEmpty(ss) ? _L.fromArray([]) : _L.fromArray([f(ss)]);
   });
   var plot = F2(function (xs,ys) {
      return {_: {}
             ,line: true
             ,lineStyle: $Graphics$Collage.defaultLine
             ,marker: $Types.NoMarker
             ,markerColor: $Color.blue
             ,markerSize: 1
             ,x: xs
             ,y: ys};
   });
   var fromPlot = function (p) {
      return function () {
         switch (p.ctor)
         {case "LP":
            return $Maybe.Just(p._0);}
         return $Maybe.Nothing;
      }();
   };
   var getLinePlots = function (a) {
      return A2($List.filterMap,
      fromPlot,
      a.plots);
   };
   var toPlot = function (p) {
      return $Types.LP(p);
   };
   var addPlots = F2(function (lps,
   a) {
      return function () {
         var updatedPlots = $List.append(a.plots)(A2($List.map,
         toPlot,
         lps));
         return _U.replace([["plots"
                            ,updatedPlots]],
         a);
      }();
   });
   var markerColor = F2(function (c,
   p) {
      return _U.replace([["markerColor"
                         ,c]],
      p);
   });
   var markerSize = F2(function (s,
   p) {
      return _U.replace([["markerSize"
                         ,s]],
      p);
   });
   var marker = F2(function (m,p) {
      return _U.replace([["marker"
                         ,m]],
      p);
   });
   var lineStyle = F2(function (l,
   p) {
      return _U.replace([["lineStyle"
                         ,l]],
      p);
   });
   var line = F2(function (b,p) {
      return _U.replace([["line"
                         ,b]],
      p);
   });
   var lineWidth = F2(function (w,
   p) {
      return function () {
         var pls = p.lineStyle;
         return _U.replace([["lineStyle"
                            ,_U.replace([["width",w]],
                            pls)]],
         p);
      }();
   });
   var lineColor = F2(function (c,
   p) {
      return function () {
         var pls = p.lineStyle;
         return _U.replace([["lineStyle"
                            ,_U.replace([["color",c]],
                            pls)]],
         p);
      }();
   });
   _elm.LinePlot.values = {_op: _op
                          ,lineColor: lineColor
                          ,lineWidth: lineWidth
                          ,line: line
                          ,lineStyle: lineStyle
                          ,marker: marker
                          ,markerSize: markerSize
                          ,markerColor: markerColor
                          ,toPlot: toPlot
                          ,fromPlot: fromPlot
                          ,addPlots: addPlots
                          ,getLinePlots: getLinePlots
                          ,plot: plot
                          ,safe: safe
                          ,plotToForms: plotToForms};
   return _elm.LinePlot.values;
};