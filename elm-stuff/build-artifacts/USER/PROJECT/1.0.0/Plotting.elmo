Elm.Plotting = Elm.Plotting || {};
Elm.Plotting.make = function (_elm) {
   "use strict";
   _elm.Plotting = _elm.Plotting || {};
   if (_elm.Plotting.values)
   return _elm.Plotting.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Plotting",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Text = Elm.Text.make(_elm);
   var yTick = F2(function (yTicks,
   ax) {
      return _U.replace([["yTick"
                         ,yTicks]],
      ax);
   });
   var xTick = F2(function (xTicks,
   ax) {
      return _U.replace([["xTick"
                         ,xTicks]],
      ax);
   });
   var yLim = F2(function (lim,
   ax) {
      return _U.replace([["yLim"
                         ,lim]],
      ax);
   });
   var xLim = F2(function (lim,
   ax) {
      return _U.replace([["xLim"
                         ,lim]],
      ax);
   });
   var lineWidth = F2(function (w,
   p) {
      return function () {
         var pls = p.lineStyle;
         return _U.replace([["lineStyle"
                            ,_U.replace([["width",w]],
                            pls)]],
         p);
      }();
   });
   var lineColor = F2(function (c,
   p) {
      return function () {
         var pls = p.lineStyle;
         return _U.replace([["lineStyle"
                            ,_U.replace([["color",c]],
                            pls)]],
         p);
      }();
   });
   var showFloat = function (f) {
      return $Basics.toString($Basics.toFloat($Basics.round(100 * f)) / 100);
   };
   var linspace = F3(function (a,
   b,
   n) {
      return A2($List.map,
      function (x) {
         return (b - a) / $Basics.toFloat(n - 1) * x + a;
      },
      _L.range(0.0,
      $Basics.toFloat(n) - 1));
   });
   var showL = F2(function (p,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var _v4 = p.marker;
                 switch (_v4.ctor)
                 {case "NoMarker":
                    return function () {
                         var $ = {ctor: "_Tuple2"
                                 ,_0: $List.minimum(p.y)
                                 ,_1: $List.maximum(p.y)},
                         ymin = $._0,
                         ymax = $._1;
                         var $ = {ctor: "_Tuple2"
                                 ,_0: $List.minimum(p.x)
                                 ,_1: $List.maximum(p.x)},
                         xmin = $._0,
                         xmax = $._1;
                         var yExtent = $List.maximum(p.y) - $List.minimum(p.y);
                         var textStyle = {_: {}
                                         ,bold: false
                                         ,color: $Color.black
                                         ,height: $Maybe.Just(yExtent)
                                         ,italic: false
                                         ,line: $Maybe.Nothing
                                         ,typeface: _L.fromArray(["Helvetica"
                                                                 ,"Times New Roman"])};
                         var yTicks = A3(linspace,
                         $List.minimum(p.y) + yExtent / 6,
                         $List.maximum(p.y) - yExtent / 6,
                         4);
                         var xExtent = $List.maximum(p.x) - $List.minimum(p.x);
                         var xTicks = A3(linspace,
                         $List.minimum(p.x) + xExtent / 6,
                         $List.maximum(p.x) - xExtent / 6,
                         4);
                         var sy_ = _v0._1 * (3.8 / 5);
                         var sx_ = _v0._0 * (3.8 / 5);
                         var xaxis = $Graphics$Collage.traced($Graphics$Collage.defaultLine)(A2($Graphics$Collage.segment,
                         {ctor: "_Tuple2"
                         ,_0: (0 - sx_) / 2
                         ,_1: (0 - sy_) / 2},
                         {ctor: "_Tuple2"
                         ,_0: sx_ / 2
                         ,_1: (0 - sy_) / 2}));
                         var yaxis = $Graphics$Collage.traced($Graphics$Collage.defaultLine)(A2($Graphics$Collage.segment,
                         {ctor: "_Tuple2"
                         ,_0: (0 - sx_) / 2
                         ,_1: (0 - sy_) / 2},
                         {ctor: "_Tuple2"
                         ,_0: (0 - sx_) / 2
                         ,_1: sy_ / 2}));
                         var adjustY = function (y) {
                            return sy_ / (ymax - ymin) * (y - ymin) - sy_ / 2;
                         };
                         var adjustedY = A2($List.map,
                         adjustY,
                         p.y);
                         var xTickHeight = adjustY(yExtent) / 75;
                         var yTickLabels = A2($List.map,
                         function (yTick) {
                            return $Graphics$Collage.move({ctor: "_Tuple2"
                                                          ,_0: (0 - sx_) / 2 - xTickHeight * 4.0
                                                          ,_1: adjustY(yTick)})($Graphics$Collage.toForm($Text.centered($Text.style(textStyle)($Text.fromString(showFloat(yTick))))));
                         },
                         yTicks);
                         var adjustX = function (x) {
                            return sx_ / (xmax - xmin) * (x - xmin) - sx_ / 2;
                         };
                         var adjustedX = A2($List.map,
                         adjustX,
                         p.x);
                         var points = A3($List.map2,
                         F2(function (v0,v1) {
                            return {ctor: "_Tuple2"
                                   ,_0: v0
                                   ,_1: v1};
                         }),
                         adjustedX,
                         adjustedY);
                         var curve = $Graphics$Collage.traced(p.lineStyle)($Graphics$Collage.path(points));
                         var yTickHeight = adjustX(xExtent) / 75;
                         var yTicksForm = $List.map(function (yTick) {
                            return $Graphics$Collage.traced($Graphics$Collage.defaultLine)(A2($Graphics$Collage.segment,
                            {ctor: "_Tuple2"
                            ,_0: (0 - sx_) / 2 - yTickHeight
                            ,_1: yTick},
                            {ctor: "_Tuple2"
                            ,_0: (0 - sx_) / 2 + yTickHeight
                            ,_1: yTick}));
                         })(A2($List.map,
                         adjustY,
                         yTicks));
                         var xTicksForm = $List.map(function (xTick) {
                            return $Graphics$Collage.traced($Graphics$Collage.defaultLine)(A2($Graphics$Collage.segment,
                            {ctor: "_Tuple2"
                            ,_0: xTick
                            ,_1: (0 - sy_) / 2 - xTickHeight},
                            {ctor: "_Tuple2"
                            ,_0: xTick
                            ,_1: (0 - sy_) / 2 + xTickHeight}));
                         })(A2($List.map,
                         adjustX,
                         xTicks));
                         var xTickLabels = A2($List.map,
                         function (xTick) {
                            return $Graphics$Collage.move({ctor: "_Tuple2"
                                                          ,_0: adjustX(xTick)
                                                          ,_1: (0 - sy_) / 2 - yTickHeight * 2.5})($Graphics$Collage.toForm($Text.centered($Text.style(textStyle)($Text.fromString(showFloat(xTick))))));
                         },
                         xTicks);
                         return A2($Graphics$Collage.collage,
                         $Basics.round(_v0._0),
                         $Basics.round(_v0._1))(A2($List.append,
                         A2($List.append,
                         A2($List.append,
                         A2($List.append,
                         _L.fromArray([curve
                                      ,xaxis
                                      ,yaxis]),
                         xTicksForm),
                         yTicksForm),
                         xTickLabels),
                         yTickLabels));
                      }();}
                 return $Text.plainText("Not yet supported.");
              }();}
         _U.badCase($moduleName,
         "between lines 48 and 84");
      }();
   });
   var axes = function (lps) {
      return function () {
         var maxY = $List.maximum(A2($List.map,
         function (p) {
            return $List.maximum(p.y);
         },
         lps));
         var minY = $List.minimum(A2($List.map,
         function (p) {
            return $List.minimum(p.y);
         },
         lps));
         var ylim = {ctor: "_Tuple2"
                    ,_0: minY
                    ,_1: maxY};
         var yExtent = maxY - minY;
         var yTicks = A3(linspace,
         minY + yExtent / 6,
         maxY - yExtent / 6,
         4);
         var maxX = $List.maximum(A2($List.map,
         function (p) {
            return $List.maximum(p.x);
         },
         lps));
         var minX = $List.minimum(A2($List.map,
         function (p) {
            return $List.minimum(p.x);
         },
         lps));
         var xlim = {ctor: "_Tuple2"
                    ,_0: minX
                    ,_1: maxX};
         var xExtent = maxX - minX;
         var xTicks = A3(linspace,
         minX + xExtent / 6,
         maxX - xExtent / 6,
         4);
         return {_: {}
                ,linePlots: lps
                ,xLim: xlim
                ,xTick: xTicks
                ,yLim: ylim
                ,yTick: yTicks};
      }();
   };
   var Figure = F3(function (a,
   b,
   c) {
      return {_: {}
             ,axes: a
             ,coordinates: c
             ,plotSizes: b};
   });
   var Axes = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,linePlots: a
             ,xLim: d
             ,xTick: b
             ,yLim: e
             ,yTick: c};
   });
   var LinePlot = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,lineStyle: c
             ,marker: d
             ,markerColor: f
             ,markerSize: e
             ,x: a
             ,y: b};
   });
   var NoMarker = {ctor: "NoMarker"};
   var plotL = F2(function (xs,
   ys) {
      return function () {
         var yExtent = $List.maximum(ys) - $List.minimum(ys);
         var xExtent = $List.maximum(xs) - $List.minimum(xs);
         return {_: {}
                ,lineStyle: $Graphics$Collage.defaultLine
                ,marker: NoMarker
                ,markerColor: $Color.blue
                ,markerSize: 1
                ,x: xs
                ,y: ys};
      }();
   });
   var Triangle = {ctor: "Triangle"};
   var Square = {ctor: "Square"};
   var Shell = {ctor: "Shell"};
   var Circle = {ctor: "Circle"};
   _elm.Plotting.values = {_op: _op
                          ,Circle: Circle
                          ,Shell: Shell
                          ,Square: Square
                          ,Triangle: Triangle
                          ,NoMarker: NoMarker
                          ,LinePlot: LinePlot
                          ,Axes: Axes
                          ,Figure: Figure
                          ,linspace: linspace
                          ,showFloat: showFloat
                          ,showL: showL
                          ,lineColor: lineColor
                          ,lineWidth: lineWidth
                          ,plotL: plotL
                          ,axes: axes
                          ,xLim: xLim
                          ,yLim: yLim
                          ,xTick: xTick
                          ,yTick: yTick};
   return _elm.Plotting.values;
};